方法一 暴力遍历所有 nums，求和，返回下标

class Solution
    def twoSum(self, nums:List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[i] + nums[j] == target:
                   return [i, j]
        renturn None
        
方法二 给定一个容器cache缓存需要找寻的值
遍历所有nums 计算target - nums，如果在容器中，则返回下标
用cache存储需要找寻的值，因为需要返回index，故字典dict是一个很好的容器

class Solution
    def twoSum(self,nums:List[int], target: int) -> List[int]:
        cache = {}
        for idx, num in enumerate(nums):
            cur = target - num
            if num in cache:
                return [cache[num], idx]
            cache[cur] = idx
         return None
         
 方法三 最直白
 class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in nums:
            j = target - i
            start_index = nums.index(i)
            next_index = start_index + 1
            temp_nums = nums[next_index:]
            if j in temp_nums:
                return(nums.index(i), temp_nums.index(j)+next_index)
 
 s1 = Solution()
 s1.twoSum([2,7,11,15], 9)
